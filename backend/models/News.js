const mongoose = require('mongoose');

const newsSchema = new mongoose.Schema(
  {
    title: {
      type: String,
      required: true,
      trim: true,
      maxlength: 200,
    },
    content: {
      type: String,
      required: true,
      maxlength: 5000,
    },
    excerpt: {
      type: String,
      required: true,
      maxlength: 500, // Increased from 300 to 500 characters for more descriptive excerpts
    },
    category: {
      type: String,
      required: true,
      enum: [
        "news",
        "event",
        "announcement",
        "press-release",
        "photo-gallery",
        "notice",
      ],
      default: "news",
    },
    status: {
      type: String,
      enum: ["draft", "published", "archived"],
      default: "draft",
    },
    featured: {
      type: Boolean,
      default: false,
    },
    image: {
      type: String, // Store as simple string path, not object (primary/featured image)
      default: null,
    },
    images: [
      {
        type: String, // Array of image paths for multiple images
        trim: true,
      },
    ],
    eventDate: {
      type: Date,
      required: function () {
        return this.category === "event";
      },
    },
    eventLocation: {
      type: String,
      required: function () {
        return this.category === "event";
      },
    },
    author: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
      required: true,
    },
    tags: [
      {
        type: String,
        trim: true,
      },
    ],
    slug: {
      type: String,
      unique: true,
      required: false, // Will be auto-generated by pre-save hook
    },
    views: {
      type: Number,
      default: 0,
    },
    likes: [
      {
        type: mongoose.Schema.Types.ObjectId,
        ref: "User",
      },
    ],
    comments: [
      {
        user: {
          type: mongoose.Schema.Types.ObjectId,
          ref: "User",
          required: true,
        },
        content: {
          type: String,
          required: true,
          maxlength: 500,
        },
        createdAt: {
          type: Date,
          default: Date.now,
        },
      },
    ],
    embeddedForms: [
      {
        form: {
          type: mongoose.Schema.Types.ObjectId,
          ref: "Form",
          required: true,
        },
        position: {
          type: String,
          enum: ["top", "middle", "bottom", "inline"],
          default: "bottom",
        },
        displayStyle: {
          type: String,
          enum: ["inline", "popup", "sidebar"],
          default: "inline",
        },
        isActive: {
          type: Boolean,
          default: true,
        },
        addedBy: {
          type: mongoose.Schema.Types.ObjectId,
          ref: "User",
          required: true,
        },
        addedAt: {
          type: Date,
          default: Date.now,
        },
      },
    ],
    // Simple form attachment (new approach)
    attachedForm: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Form",
      required: false,
    },
    formDisplayType: {
      type: String,
      enum: ["link", "embedded"],
      default: "link",
    },
  },
  {
    timestamps: true,
  }
);

// Index for better search performance
newsSchema.index({ title: 'text', content: 'text', excerpt: 'text' });
newsSchema.index({ category: 1, status: 1, createdAt: -1 });
newsSchema.index({ featured: 1, status: 1, createdAt: -1 });
// Note: slug index is automatically created due to unique: true in schema

// Generate slug from title before saving
newsSchema.pre('save', function(next) {
  // Always generate slug if it doesn't exist or if title has changed
  if (!this.slug || this.isModified('title')) {
    // Ensure we have a title before generating slug
    if (!this.title) {
      return next(new Error('Title is required to generate slug'));
    }
    
    const baseSlug = this.title
      .toLowerCase()
      .replace(/[^a-z0-9\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .replace(/^-+|-+$/g, '') // Remove leading/trailing dashes
      .substring(0, 50); // Limit length
    
    this.slug = baseSlug + '-' + Date.now();
  }
  next();
});

// Virtual for like count
newsSchema.virtual('likeCount').get(function() {
  return this.likes ? this.likes.length : 0;
});

// Virtual for comment count
newsSchema.virtual('commentCount').get(function() {
  return this.comments ? this.comments.length : 0;
});

// Virtual for read time estimation (words per minute = 200)
newsSchema.virtual('readTime').get(function() {
  const wordCount = this.content.split(' ').length;
  const readTime = Math.ceil(wordCount / 200);
  return readTime;
});

// Ensure virtual fields are serialized
newsSchema.set('toJSON', { virtuals: true });

module.exports = mongoose.model('News', newsSchema);
